// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Job extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Job entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Job entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Job", id.toString(), this);
  }

  static load(id: string): Job | null {
    return store.get("Job", id) as Job | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): string | null {
    let value = this.get("state");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (value === null) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(value as string));
    }
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(value as Bytes));
    }
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(value as Bytes));
    }
  }

  get content(): string | null {
    let value = this.get("content");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set content(value: string | null) {
    if (value === null) {
      this.unset("content");
    } else {
      this.set("content", Value.fromString(value as string));
    }
  }

  get num_job_changes(): i32 {
    let value = this.get("num_job_changes");
    return value.toI32();
  }

  set num_job_changes(value: i32) {
    this.set("num_job_changes", Value.fromI32(value));
  }

  get num_data_changes(): i32 {
    let value = this.get("num_data_changes");
    return value.toI32();
  }

  set num_data_changes(value: i32) {
    this.set("num_data_changes", Value.fromI32(value));
  }

  get num_contributions(): i32 {
    let value = this.get("num_contributions");
    return value.toI32();
  }

  set num_contributions(value: i32) {
    this.set("num_contributions", Value.fromI32(value));
  }

  get num_refunds(): i32 {
    let value = this.get("num_refunds");
    return value.toI32();
  }

  set num_refunds(value: i32) {
    this.set("num_refunds", Value.fromI32(value));
  }

  get contributor(): string | null {
    let value = this.get("contributor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contributor(value: string | null) {
    if (value === null) {
      this.unset("contributor");
    } else {
      this.set("contributor", Value.fromString(value as string));
    }
  }
}

export class Contributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Contributor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Contributor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Contributor", id.toString(), this);
  }

  static load(id: string): Contributor | null {
    return store.get("Contributor", id) as Contributor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get job(): string | null {
    let value = this.get("job");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set job(value: string | null) {
    if (value === null) {
      this.unset("job");
    } else {
      this.set("job", Value.fromString(value as string));
    }
  }
}
